{"version":3,"file":"static/js/838.d6be9318.chunk.js","mappings":"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","sources":["pages/gedure/usuarios/ver/perfil/PAvatar.js"],"sourcesContent":["import React from 'react';\n\n// Router\nimport { useParams } from 'react-router-dom';\n\n// MUI\nimport { Avatar, Box, Divider, Grid, Typography } from '@mui/material';\nimport LoadingButton from '@mui/lab/LoadingButton';\n\n// Form\nimport { useForm } from 'react-hook-form';\n\n// Redux\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateAvatar } from '../../../../../store/slices/requestStatus/async_trunk/users/updateAvatar';\n\nconst classes = {\n  avatar: tema => ({\n\t\tbackgroundColor: tema.palette.secondary.main,\n\t\tcolor: tema.palette.secondary.contrastText,\n\t\theight: tema.spacing(10),\n\t\twidth: tema.spacing(10),\n\t})\n}\n\nexport function PAvatarForm({ user, loadingUpload, loadingDelete, progress, handleSubmit, register }) {\n  const { onChange, onBlur, name, ref } = register('avatar'); \n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={12}>\n        <Typography variant='h6' component='span' className='text__bold--semi'>\n\t\t\t\t\tAvatar del usuario\n\t\t\t\t</Typography>\n\t\t\t\t<Box mt={1}>\n\t\t\t\t\t<Divider />\n\t\t\t\t</Box>\n      </Grid>\n      <Grid container alignItems='center' spacing={2} item xs={12}>\n        <Grid item>\n          <Avatar\n\t\t\t\t\t\talt='Avatar User' \n\t\t\t\t\t\tsrc={user.avatar} \n\t\t\t\t\t\tsx={classes.avatar}\n\t\t\t\t\t>\n\t\t\t\t\t\t{user.name.substring(0, 1).toUpperCase()}\n\t\t\t\t\t</Avatar>\n        </Grid>\n        <Grid item>\n\t\t\t\t\t<input \n\t\t\t\t\t\tid='update_avatar_user' \n\t\t\t\t\t\ttype='file' \n\t\t\t\t\t\tstyle={{display: 'none'}}\n\t\t\t\t\t\taccept=\"image/*\"\n            disabled={loadingDelete}\n            onChange={e => {\n              onChange(e);\n              handleSubmit();\n            }}\n            onBlur={onBlur}\n            name={name}\n            ref={ref}\n\t\t\t\t\t/>\n\t\t\t\t\t<label htmlFor='update_avatar_user'>\n            <LoadingButton \n              variant='contained' \n              loading={loadingUpload}\n              disabled={loadingDelete}\n              loadingIndicator={loadingUpload && progress < 99 ? `${progress}%` : null} \n              color='primary'\n              component='span' \n              disableElevation\n            >\n              Cambiar avatar\n            </LoadingButton>\n\t\t\t\t\t</label>\n\t\t\t\t</Grid>\n        <Grid item>\n          <LoadingButton \n            variant='outlined' \n            loading={loadingDelete}\n            disabled={loadingUpload}\n            color='inherit'\n            onClick={() => {\n              onChange({target:{name:'avatar',value:'delete'}});\n              handleSubmit();\n            }}\n          >\n            Quitar avatar\n          </LoadingButton>\n\t\t\t\t</Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default function PAvatar() {\n  const { id } = useParams();\n  const { userSelected, loadingUpload, loadingDelete, progress } = useSelector(state => ({\n    userSelected: state.requestStatus.userShow.userSelected,\n    loadingUpload: state.requestStatus.personalAvatar.loadingUpload,\n    loadingDelete: state.requestStatus.personalAvatar.loadingDelete,\n    progress: state.requestStatus.personalAvatar.progress,\n  }));\n  const dispatch = useDispatch();\n\n  const { handleSubmit, register, resetField } = useForm();\n\n  const onSubmit = async submitData => {\n    const formData = new FormData();\n\n    if (submitData.avatar === 'delete') {\n      formData.append('delete_avatar', true);\n    }else {\n      formData.append('avatar', submitData.avatar[0]);\n    }\n    formData.append('_method', 'PUT');\n\n    await dispatch(updateAvatar({data: formData, id, type: submitData.avatar!=='delete' ? 1 : 2}));\n\n    resetField('avatar');\n  }\n\n  return (\n    <Box mb={4}>\n      <PAvatarForm\n        user={userSelected}\n        handleSubmit={handleSubmit(onSubmit)}\n        register={register}\n        progress={progress}\n        loadingUpload={loadingUpload}\n        loadingDelete={loadingDelete}\n      />\n    </Box>\n  )\n}"],"names":["classes","avatar","tema","backgroundColor","palette","secondary","main","color","contrastText","height","spacing","width","PAvatarForm","user","loadingUpload","loadingDelete","progress","handleSubmit","register","onChange","onBlur","name","ref","container","item","xs","variant","component","className","mt","alignItems","alt","src","sx","substring","toUpperCase","id","type","style","display","accept","disabled","e","htmlFor","loading","loadingIndicator","disableElevation","onClick","target","value","PAvatar","useParams","useSelector","state","userSelected","requestStatus","userShow","personalAvatar","dispatch","useDispatch","useForm","resetField","onSubmit","submitData","formData","FormData","append","updateAvatar","data","mb"],"sourceRoot":""}