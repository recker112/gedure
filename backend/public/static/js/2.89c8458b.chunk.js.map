{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/utils/isWeb.ts","../../src/utils/isProxyEnabled.ts","../../src/useController.ts","../../src/useFormState.ts","../../src/logic/getControllerValue.ts","../../src/controller.tsx","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/getFieldsValues.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/remove.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/utils/isFileInput.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/logic/skipValidation.ts","../../src/utils/isFunction.ts","../../src/utils/isString.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/utils/getValidationModes.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/Subject.ts","../../src/useForm.ts","../../src/useWatch.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","element","type","value","isObjectType","isNullOrUndefined","Array","isArray","Date","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","FormContext","displayName","Provider","omit","children","isProxyEnabled","formState","readFormStateRef","localReadFormStateRef","isRoot","Proxy","get","prop","keys","formStateData","isEmptyObject","find","window","HTMLElement","document","isWeb","useController","rules","control","shouldUnregister","methods","defaultValuesRef","register","fieldsRef","unregister","namesRef","subjectsRef","shouldUnmount","inFieldArrayActionRef","isFieldArray","array","field","_f","setInputStateValue","onChange","onBlur","ref","formStateRef","nameRef","updateFormState","readFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","formStateSubscription","state","subscribe","next","convertToArrayPayload","includes","shouldRenderFormState","unsubscribe","getProxyFormState","useFormState","controllerSubscription","data","values","shouldUnmountField","mount","event","isCheckBoxInput","checked","getControllerValue","elm","focus","fieldState","invalid","isTouched","error","Controller","render","validateAllFieldCriteria","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","refs","getFieldsValues","output","disabled","every","deepEqual","object1","object2","isErrorObject","isPrimitive","keys1","keys2","val1","val2","deepMerge","targetValue","sourceValue","setDirtyFields","defaultValues","parentNode","parentName","slice","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","options","option","map","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","getFieldValueAs","fieldsRefs","criteriaMode","mounted","required","min","max","maxLength","minLength","pattern","validate","isOnBlur","isOnChange","isOnTouch","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","isString","RegExp","getValidateError","validationData","isRegex","a","inputValue","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","mode","isOnSubmit","tearDowns","tearDown","this","push","teardown","observer","subscription","closed","add","observers","subscriber","isWindowUndefined","useForm","reValidateMode","resolver","context","shouldFocusError","submitCount","isSubmitting","isSubmitSuccessful","resolverRef","fieldArrayDefaultValuesRef","contextRef","isMountedRef","watch","Set","unMount","watchAll","validationMode","getValidationModes","isValidateAllFieldCriteria","isFieldWatched","has","shouldRenderBaseOnError","shouldSkipRender","inputState","isValidFromResolver","isWatched","previousError","validateForm","updatedFormState","setFieldValue","rawValue","shouldRender","shouldRegister","isHTMLElement","forEach","radioRef","selectRef","checkboxRef","shouldDirty","shouldTouch","updateTouchAndDirtyState","shouldValidate","trigger","getIsDirty","formValues","isCurrentTouched","isChanged","previousIsDirty","isPreviousFieldDirty","isCurrentFieldDirty","isPreviousFieldTouched","executeInlineValidation","skipReRender","validateField","executeResolverValidation","shouldCheckValid","valid","fieldError","fieldNames","schemaResult","Promise","all","fieldName","shouldFocus","updateIsValid","updateIsValidAndInputValue","isValueUndefined","defaultChecked","setInternalValues","inputKey","setValue","isReset","setFieldArrayDirtyFields","getValues","handleChange","inputType","shouldSkipValidation","hasValidation","skipValidation","parentNodeName","currentError","clearErrors","inputName","setError","watchInternal","isGlobal","isArrayNames","fieldValues","info","delete","keepError","keepValue","keepDirty","keepTouched","keepDefaultValue","keepIsValid","registerFieldRef","isRadioOrCheckboxFunction","contains","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","registerAbsentFields","reset","keepStateOptions","updatedValues","keepValues","inputRef","closest","keepDefaultValues","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","useFieldArraySubscription","isLiveInDom","useWatch","updateValue","watchSubscription","startsWith","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","F","s","n","done","_e","f","err","normalCompletion","didErr","step","_e2","_toConsumableArray","arr","arrayLikeToArray","iter","from","unsupportedIterableToArray"],"mappings":"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","file":"static/js/2.89c8458b.chunk.js","sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n    Object.keys(formState).find(\n      (key) =>\n        readFormStateRef[key as keyof ReadFormState] ===\n        (isRoot ? VALIDATION_MODE.all : true),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== 'undefined';\n\nexport default isProxyEnabled;\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport isUndefined from './utils/isUndefined';\nimport { EVENTS } from './constants';\nimport {\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  shouldUnregister,\n}: UseControllerProps<TFieldValues, TName>): UseControllerReturn<\n  TFieldValues,\n  TName\n> {\n  const methods = useFormContext<TFieldValues>();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    unregister,\n    namesRef,\n    subjectsRef,\n    shouldUnmount,\n    inFieldArrayActionRef,\n  } = control || methods.control;\n\n  const isFieldArray = isNameInFieldArray(namesRef.current.array, name);\n  const field = get(fieldsRef.current, name);\n  const [value, setInputStateValue] = React.useState(\n    isFieldArray || !field || !field._f\n      ? isFieldArray || isUndefined(get(defaultValuesRef.current, name))\n        ? defaultValue\n        : get(defaultValuesRef.current, name)\n      : field._f.value,\n  );\n  const { onChange, onBlur, ref } = register(name, {\n    ...rules,\n    value,\n  });\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n\n  React.useEffect(() => {\n    const controllerSubscription = subjectsRef.current.control.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n\n    return () => {\n      controllerSubscription.unsubscribe();\n      const shouldUnmountField = shouldUnmount || shouldUnregister;\n\n      if (\n        isFieldArray\n          ? shouldUnmountField && !inFieldArrayActionRef.current\n          : shouldUnmountField\n      ) {\n        unregister(name);\n      } else {\n        const field = get(fieldsRef.current, name);\n\n        if (field && field._f) {\n          field._f.mount = false;\n        }\n      }\n    };\n  }, [name]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) =>\n        elm &&\n        ref({\n          focus: () => elm.focus && elm.focus(),\n        }),\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const { control, name } = props || {};\n  const methods = useFormContext();\n  const { formStateRef, subjectsRef, readFormStateRef } =\n    control || methods.control;\n  const nameRef = React.useRef<InternalFieldName>(name as InternalFieldName);\n  nameRef.current = name as InternalFieldName;\n\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next: (formState) =>\n        (!nameRef.current ||\n          !formState.name ||\n          convertToArrayPayload(nameRef.current).includes(formState.name)) &&\n        shouldRenderFormState(formState, readFormState.current) &&\n        updateFormState({\n          ...formStateRef.current,\n          ...formState,\n        }),\n    });\n\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n\n  return getProxyFormState<TFieldValues>(\n    isProxyEnabled,\n    formState as FormState<TFieldValues>,\n    readFormStateRef,\n    readFormState,\n    false,\n  );\n}\n\nexport { useFormState };\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  output: FieldValues = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field && !isNullOrUndefined(output)) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f && _f.ref\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      current &&\n        getFieldsValues(\n          {\n            current,\n          },\n          output[name],\n        );\n    }\n  }\n\n  return output;\n};\n\nexport default getFieldsValues;\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n  criteriaMode?: CriteriaMode,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field;\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n  };\n};\n","import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T, mounted?: boolean) =>\n  mounted &&\n  options &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n      mount,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n): Promise<InternalFieldErrors> => {\n  if (!mount) {\n    return {};\n  }\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox ? (refs || [])[0] || {} : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (\n    (!isNullOrUndefined(min) || !isNullOrUndefined(max)) &&\n    inputValue !== ''\n  ) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const validateRef = isRadioOrCheckbox && refs ? refs[0] : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(inputValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getFieldValueAs from './logic/getFieldValueAs';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport getResolverOptions from './logic/getResolverOptions';\nimport hasValidation from './logic/hasValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isObject from './utils/isObject';\nimport isPrimitive from './utils/isPrimitive';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const resolverRef = React.useRef(resolver);\n  const formStateRef = React.useRef(formState);\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const defaultValuesRef =\n    React.useRef<DefaultValues<TFieldValues>>(defaultValues);\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const contextRef = React.useRef(context);\n  const inFieldArrayActionRef = React.useRef(false);\n  const isMountedRef = React.useRef(false);\n  const subjectsRef: Subjects<TFieldValues> = React.useRef({\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  });\n  const namesRef = React.useRef<Names>({\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n    watchAll: false,\n  });\n\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  resolverRef.current = resolver;\n  contextRef.current = context;\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    namesRef.current.watchAll ||\n    namesRef.current.watch.has(name) ||\n    namesRef.current.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const shouldRenderBaseOnError = React.useCallback(\n    async (\n      shouldSkipRender: boolean,\n      name: InternalFieldName,\n      error?: FieldError,\n      inputState?: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      },\n      isValidFromResolver?: boolean,\n      isWatched?: boolean,\n    ): Promise<void> => {\n      const previousError = get(formStateRef.current.errors, name);\n      const isValid = readFormStateRef.current.isValid\n        ? resolver\n          ? isValidFromResolver\n          : await validateForm(fieldsRef.current, true)\n        : false;\n\n      error\n        ? set(formStateRef.current.errors, name, error)\n        : unset(formStateRef.current.errors, name);\n\n      if (\n        (isWatched ||\n          (error ? !deepEqual(previousError, error, true) : previousError) ||\n          !isEmptyObject(inputState) ||\n          formStateRef.current.isValid !== isValid) &&\n        !shouldSkipRender\n      ) {\n        const updatedFormState = {\n          ...inputState,\n          isValid: !!isValid,\n          errors: formStateRef.current.errors,\n          name,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        subjectsRef.current.state.next(isWatched ? { name } : updatedFormState);\n      }\n\n      subjectsRef.current.state.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const field = get(fieldsRef.current, name);\n\n      if (field) {\n        const _f = (field as Field)._f;\n\n        if (_f) {\n          const value =\n            isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n              ? ''\n              : rawValue;\n          _f.value = getFieldValueAs(rawValue, _f);\n\n          if (isRadioInput(_f.ref)) {\n            (_f.refs || []).forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === value),\n            );\n          } else if (isFileInput(_f.ref) && !isString(value)) {\n            _f.ref.files = value as FileList;\n          } else if (isMultipleSelect(_f.ref)) {\n            [..._f.ref.options].forEach(\n              (selectRef) =>\n                (selectRef.selected = (value as string[]).includes(\n                  selectRef.value,\n                )),\n            );\n          } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(value)\n                      ? !!(value as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : value === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!value);\n          } else {\n            _f.ref.value = value;\n          }\n\n          if (shouldRender) {\n            const values = getFieldsValues(fieldsRef);\n            set(values, name, rawValue);\n            subjectsRef.current.control.next({\n              values: {\n                ...defaultValuesRef.current,\n                ...values,\n              } as DefaultValues<TFieldValues>,\n              name,\n            });\n          }\n\n          (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirtyState(name, value, options.shouldTouch);\n          options.shouldValidate && trigger(name as Path<TFieldValues>);\n        } else {\n          field._f = {\n            ref: {\n              name,\n              value: rawValue,\n            },\n            value: rawValue,\n          };\n        }\n      }\n    },\n    [],\n  );\n\n  const getIsDirty: GetIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n\n    name && data && set(formValues, name, data);\n\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n\n  const updateTouchAndDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      isCurrentTouched?: boolean,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      const state: Partial<FormState<TFieldValues>> & { name: string } = {\n        name,\n      };\n      let isChanged = false;\n\n      if (readFormStateRef.current.isDirty) {\n        const previousIsDirty = formStateRef.current.isDirty;\n        formStateRef.current.isDirty = getIsDirty();\n        state.isDirty = formStateRef.current.isDirty;\n        isChanged = previousIsDirty !== state.isDirty;\n      }\n\n      if (readFormStateRef.current.dirtyFields && !isCurrentTouched) {\n        const isPreviousFieldDirty = get(\n          formStateRef.current.dirtyFields,\n          name,\n        );\n        const isCurrentFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        isCurrentFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n        state.dirtyFields = formStateRef.current.dirtyFields;\n        isChanged =\n          isChanged ||\n          isPreviousFieldDirty !== get(formStateRef.current.dirtyFields, name);\n      }\n\n      const isPreviousFieldTouched = get(\n        formStateRef.current.touchedFields,\n        name,\n      );\n\n      if (isCurrentTouched && !isPreviousFieldTouched) {\n        set(formStateRef.current.touchedFields, name, isCurrentTouched);\n        state.touchedFields = formStateRef.current.touchedFields;\n        isChanged =\n          isChanged ||\n          (readFormStateRef.current.touchedFields &&\n            isPreviousFieldTouched !== isCurrentTouched);\n      }\n\n      isChanged && shouldRender && subjectsRef.current.state.next(state);\n\n      return isChanged ? state : {};\n    },\n    [],\n  );\n\n  const executeInlineValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender: boolean,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(skipReRender, name, error);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeResolverValidation = React.useCallback(\n    async (names?: InternalFieldName[]) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef),\n        contextRef.current,\n        getResolverOptions(\n          namesRef.current.mount,\n          fieldsRef.current,\n          criteriaMode,\n        ),\n      );\n\n      if (names) {\n        for (const name of names) {\n          const error = get(errors, name);\n          error\n            ? set(formStateRef.current.errors, name, error)\n            : unset(formStateRef.current.errors, name);\n        }\n      } else {\n        formStateRef.current.errors = errors;\n      }\n\n      return errors;\n    },\n    [criteriaMode],\n  );\n\n  const validateForm = async (\n    fieldsRef: FieldRefs,\n    shouldCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n          );\n\n          if (shouldCheckValid) {\n            if (fieldError[_f.name]) {\n              context.valid = false;\n              break;\n            }\n          } else {\n            fieldError[_f.name]\n              ? set(formStateRef.current.errors, _f.name, fieldError[_f.name])\n              : unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name, options = {}) => {\n      const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n      let isValid;\n\n      subjectsRef.current.state.next({\n        isValidating: true,\n      });\n\n      if (resolver) {\n        const schemaResult = await executeResolverValidation(\n          isUndefined(name) ? name : fieldNames,\n        );\n        isValid = name\n          ? fieldNames.every((name) => !get(schemaResult, name))\n          : isEmptyObject(schemaResult);\n      } else {\n        if (name) {\n          isValid = (\n            await Promise.all(\n              fieldNames\n                .filter((fieldName) => get(fieldsRef.current, fieldName))\n                .map(\n                  async (fieldName) =>\n                    await executeInlineValidation(fieldName, true),\n                ),\n            )\n          ).every(Boolean);\n        } else {\n          await validateForm(fieldsRef.current);\n          isValid = isEmptyObject(formStateRef.current.errors);\n        }\n      }\n\n      subjectsRef.current.state.next({\n        ...(isString(name) ? { name } : {}),\n        errors: formStateRef.current.errors,\n        isValidating: false,\n      });\n\n      if (options.shouldFocus && !isValid) {\n        focusFieldBy(\n          fieldsRef.current,\n          (key) => get(formStateRef.current.errors, key),\n          fieldNames,\n        );\n      }\n\n      readFormStateRef.current.isValid && updateIsValid();\n\n      return isValid;\n    },\n    [executeResolverValidation, executeInlineValidation],\n  );\n\n  const updateIsValidAndInputValue = (name: InternalFieldName, ref?: Ref) => {\n    const field = get(fieldsRef.current, name) as Field;\n\n    if (field) {\n      const isValueUndefined = isUndefined(field._f.value);\n      const defaultValue = isValueUndefined\n        ? get(defaultValuesRef.current, name)\n        : field._f.value;\n\n      if (!isUndefined(defaultValue)) {\n        if (ref && (ref as HTMLInputElement).defaultChecked) {\n          field._f.value = getFieldValue(field);\n        } else if (isNameInFieldArray(namesRef.current.array, name)) {\n          field._f.value = defaultValue;\n        } else {\n          setFieldValue(name, defaultValue);\n        }\n      } else if (isValueUndefined) {\n        field._f.value = getFieldValue(field);\n      }\n    }\n\n    isMountedRef.current && readFormStateRef.current.isValid && updateIsValid();\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const isValid = resolver\n        ? isEmptyObject(\n            (\n              await resolverRef.current!(\n                {\n                  ...getFieldsValues(fieldsRef),\n                  ...values,\n                },\n                contextRef.current,\n                getResolverOptions(\n                  namesRef.current.mount,\n                  fieldsRef.current,\n                  criteriaMode,\n                ),\n              )\n            ).errors,\n          )\n        : await validateForm(fieldsRef.current, true);\n\n      isValid !== formStateRef.current.isValid &&\n        subjectsRef.current.state.next({\n          isValid,\n        });\n    },\n    [criteriaMode],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([inputKey, inputValue]) => {\n        const fieldName = `${name}.${inputKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n        const isFieldArray = namesRef.current.array.has(name);\n\n        isFieldArray || !isPrimitive(inputValue) || (field && !field._f)\n          ? setInternalValues(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = namesRef.current.array.has(name);\n\n    if (isFieldArray) {\n      subjectsRef.current.array.next({\n        values: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        subjectsRef.current.state.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    ((field && !field._f) || isFieldArray) && !isNullOrUndefined(value)\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && subjectsRef.current.state.next({});\n    subjectsRef.current.watch.next({ name, values: getValues() });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n\n        const shouldSkipValidation =\n          (!hasValidation(field._f, field._f.mount) &&\n            !resolver &&\n            !get(formStateRef.current.errors, name)) ||\n          skipValidation({\n            isBlurEvent,\n            isTouched: !!get(formStateRef.current.touchedFields, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            isReValidateOnBlur,\n            isReValidateOnChange,\n            ...validationMode,\n          });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const inputState = updateTouchAndDirtyState(\n          name,\n          field._f.value,\n          isBlurEvent,\n          false,\n        );\n\n        const shouldRender = !isEmptyObject(inputState) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            subjectsRef.current.watch.next({\n              name,\n              type,\n              values: getValues(),\n            });\n          return (\n            shouldRender &&\n            subjectsRef.current.state.next(\n              isWatched ? { name } : { ...inputState, name },\n            )\n          );\n        }\n\n        subjectsRef.current.state.next({\n          isValidating: true,\n        });\n\n        if (resolver) {\n          const { errors } = await resolverRef.current!(\n            getFieldsValues(fieldsRef),\n            contextRef.current,\n            getResolverOptions([name], fieldsRef.current, criteriaMode),\n          );\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n        } else {\n          error = (await validateField(field, isValidateAllFieldCriteria))[\n            name\n          ];\n        }\n\n        !isBlurEvent &&\n          subjectsRef.current.watch.next({\n            name,\n            type,\n            values: getValues(),\n          });\n        shouldRenderBaseOnError(\n          false,\n          name,\n          error,\n          inputState,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...defaultValuesRef.current,\n      ...getFieldsValues(fieldsRef),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(formStateRef.current.errors, inputName),\n        )\n      : (formStateRef.current.errors = {});\n\n    subjectsRef.current.state.next({\n      errors: formStateRef.current.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    subjectsRef.current.state.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal, formValues) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues =\n        formValues || isMountedRef.current\n          ? {\n              ...defaultValuesRef.current,\n              ...(formValues || getFieldsValues(fieldsRef)),\n            }\n          : isUndefined(defaultValue)\n          ? defaultValuesRef.current\n          : isArrayNames\n          ? defaultValue\n          : { [fieldNames as InternalFieldName]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (namesRef.current.watchAll = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of convertToArrayPayload(fieldNames)) {\n        isGlobal && namesRef.current.watch.add(fieldName as InternalFieldName);\n        result.push(get(fieldValues, fieldName as InternalFieldName));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? subjectsRef.current.watch.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? convertToArrayPayload(name)\n      : namesRef.current.mount) {\n      namesRef.current.mount.delete(inputName);\n      namesRef.current.array.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !options.keepDefaultValue && unset(defaultValuesRef.current, inputName);\n\n        subjectsRef.current.watch.next({\n          name: inputName,\n          values: getValues(),\n        });\n      }\n    }\n\n    subjectsRef.current.state.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getIsDirty() }),\n    });\n    !options.keepIsValid && updateIsValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field = get(fieldsRef.current, name) as Field;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isRadioOrCheckbox &&\n        compact(field._f.refs || []).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(fieldsRef.current, name, field);\n\n    updateIsValidAndInputValue(name, ref);\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options = {}) => {\n      const field = get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(field && field._f ? field._f : { ref: { name } }),\n          name,\n          mount: true,\n          ...options,\n        },\n      });\n      namesRef.current.mount.add(name);\n      !field && updateIsValidAndInputValue(name);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null): void => {\n              if (ref) {\n                registerFieldRef(name, ref, options);\n              } else {\n                const field = get(fieldsRef.current, name, {}) as Field;\n                const shouldUnmount =\n                  shouldUnregister || options.shouldUnregister;\n\n                if (field._f) {\n                  field._f.mount = false;\n                  // If initial state of field element is disabled,\n                  // value is not set on first \"register\"\n                  // re-sync the value in when it switched to enabled\n                  if (isUndefined(field._f.value)) {\n                    field._f.value = field._f.ref.value;\n                  }\n                }\n\n                shouldUnmount &&\n                  !(\n                    isNameInFieldArray(namesRef.current.array, name) &&\n                    inFieldArrayActionRef.current\n                  ) &&\n                  namesRef.current.unMount.add(name);\n              }\n            },\n          };\n    },\n    [],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues = getFieldsValues(fieldsRef);\n\n      subjectsRef.current.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolver) {\n          const { errors, values } = await resolverRef.current!(\n            fieldValues,\n            contextRef.current,\n            getResolverOptions(\n              namesRef.current.mount,\n              fieldsRef.current,\n              criteriaMode,\n            ),\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          subjectsRef.current.state.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key) => get(formStateRef.current.errors, key),\n              namesRef.current.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        subjectsRef.current.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria, criteriaMode],\n  );\n\n  const registerAbsentFields = <T extends DefaultValues<TFieldValues>>(\n    defaultValues: T,\n    name = '',\n  ): void => {\n    for (const key in defaultValues) {\n      const value = defaultValues[key];\n      const fieldName = name + (name ? '.' : '') + key;\n      const field = get(fieldsRef.current, fieldName);\n\n      if (!field || !field._f) {\n        if (isObject(value) || Array.isArray(value)) {\n          registerAbsentFields(value, fieldName);\n        } else if (!field) {\n          register(fieldName as Path<TFieldValues>, { value });\n        }\n      }\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of namesRef.current.mount) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      subjectsRef.current.control.next({\n        values: { ...updatedValues },\n      });\n\n      subjectsRef.current.watch.next({\n        values: { ...updatedValues },\n      });\n\n      subjectsRef.current.array.next({\n        values: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    namesRef.current = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n    };\n\n    subjectsRef.current.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? formStateRef.current.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? formStateRef.current.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(values, defaultValuesRef.current)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? formStateRef.current.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? formStateRef.current.dirtyFields\n        : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? formStateRef.current.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    isMountedRef.current = !!keepStateOptions.keepIsValid;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          updateFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = subjectsRef.current.array.subscribe({\n      next(state) {\n        if (state.values && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.values);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    return () => {\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const isLiveInDom = (ref: Ref) =>\n      !isHTMLElement(ref) || !document.contains(ref);\n\n    if (!isMountedRef.current) {\n      isMountedRef.current = true;\n      readFormStateRef.current.isValid && updateIsValid();\n      !shouldUnregister && registerAbsentFields(defaultValuesRef.current);\n    }\n\n    for (const name of namesRef.current.unMount) {\n      const field = get(fieldsRef.current, name) as Field;\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every(isLiveInDom)\n          : isLiveInDom(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    namesRef.current.unMount = new Set();\n  });\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        inFieldArrayActionRef,\n        getIsDirty,\n        subjectsRef,\n        watchInternal,\n        fieldsRef,\n        updateIsValid,\n        namesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n        unregister,\n        shouldUnmount: shouldUnregister,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, []),\n  };\n}\n","import * as React from 'react';\n\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartial,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): UnpackNestedValue<DeepPartial<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TName;\n  defaultValue?: FieldPathValue<TFieldValues, TName>;\n  control?: Control<TFieldValues>;\n}): FieldPathValue<TFieldValues, TName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: TName;\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): FieldPathValues<TFieldValues, TName>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const { control, name, defaultValue } = props || {};\n  const methods = useFormContext();\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n\n  const { watchInternal, subjectsRef } = control || methods.control;\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? watchInternal(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    watchInternal(name as InternalFieldName);\n\n    const watchSubscription = subjectsRef.current.watch.subscribe({\n      next: ({ name: inputName, values }) =>\n        (!nameRef.current ||\n          !inputName ||\n          convertToArrayPayload(nameRef.current).some(\n            (fieldName) =>\n              inputName &&\n              fieldName &&\n              (fieldName.startsWith(inputName as InternalFieldName) ||\n                inputName.startsWith(fieldName as InternalFieldName)),\n          )) &&\n        updateValue(\n          watchInternal(\n            nameRef.current as string,\n            defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n            false,\n            values,\n          ),\n        ),\n    });\n\n    return () => watchSubscription.unsubscribe();\n  }, []);\n\n  return value;\n}\n","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}